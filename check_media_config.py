#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de v√©rification de la configuration des m√©dias
Ce script v√©rifie que les modifications pour ignorer les m√©dias envoy√©s sont bien appliqu√©es
et affiche l'√©tat actuel des dossiers
"""

import os
import sys
import logging
import time
from datetime import datetime

def setup_logging():
    """Configure le syst√®me de logging"""
    logger = logging.getLogger('media_checker')
    logger.setLevel(logging.INFO)
    
    # Handler console
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logger.addHandler(console)
    
    return logger

def check_media_organizer_modification():
    """V√©rifie si la modification du MediaOrganizer est appliqu√©e"""
    logger = logging.getLogger('media_checker')
    
    filepath = os.path.join("processors", "media_organizer.py")
    if not os.path.exists(filepath):
        logger.error(f"Fichier {filepath} introuvable!")
        return False
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier si le code contient la modification pour ignorer les m√©dias envoy√©s
    if "# MODIFICATION: Ignorer compl√®tement les m√©dias envoy√©s" in content and "if direction == 'sent':" in content:
        logger.info("‚úÖ MediaOrganizer correctement modifi√© pour ignorer les m√©dias envoy√©s")
        return True
    else:
        logger.error("‚ö†Ô∏è MediaOrganizer n'est PAS modifi√© pour ignorer les m√©dias envoy√©s!")
        return False

def get_media_folders_stats(base_dir):
    """Analyse les dossiers de m√©dias et retourne des statistiques"""
    logger = logging.getLogger('media_checker')
    stats = {
        'total_contacts': 0,
        'sent_media_folders': 0,
        'received_media_folders': 0,
        'sent_media_files': 0,
        'received_media_files': 0,
        'sent_media_size': 0,
        'received_media_size': 0,
    }
    
    if not os.path.exists(base_dir):
        logger.error(f"R√©pertoire de base {base_dir} introuvable!")
        return stats
    
    # Parcourir tous les dossiers de contacts
    for item in os.listdir(base_dir):
        contact_dir = os.path.join(base_dir, item)
        if not os.path.isdir(contact_dir):
            continue
        
        stats['total_contacts'] += 1
        
        # V√©rifier les dossiers de m√©dias envoy√©s
        sent_media_dir = os.path.join(contact_dir, 'media_envoyes')
        if os.path.exists(sent_media_dir):
            stats['sent_media_folders'] += 1
            
            # Compter les fichiers dans les sous-dossiers de types de m√©dias
            for media_type in ['audio', 'images', 'videos', 'documents']:
                media_type_dir = os.path.join(sent_media_dir, media_type)
                if os.path.exists(media_type_dir):
                    for file in os.listdir(media_type_dir):
                        file_path = os.path.join(media_type_dir, file)
                        if os.path.isfile(file_path):
                            stats['sent_media_files'] += 1
                            stats['sent_media_size'] += os.path.getsize(file_path)
        
        # V√©rifier les dossiers de m√©dias re√ßus
        received_media_dir = os.path.join(contact_dir, 'media_recus')
        if os.path.exists(received_media_dir):
            stats['received_media_folders'] += 1
            
            # Compter les fichiers dans les sous-dossiers de types de m√©dias
            for media_type in ['audio', 'images', 'videos', 'documents']:
                media_type_dir = os.path.join(received_media_dir, media_type)
                if os.path.exists(media_type_dir):
                    for file in os.listdir(media_type_dir):
                        file_path = os.path.join(media_type_dir, file)
                        if os.path.isfile(file_path):
                            stats['received_media_files'] += 1
                            stats['received_media_size'] += os.path.getsize(file_path)
    
    return stats

def format_size(size_bytes):
    """Formate une taille en bytes en format lisible"""
    if size_bytes < 1024:
        return f"{size_bytes} o"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.2f} Ko"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.2f} Mo"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.2f} Go"

def main():
    """Point d'entr√©e principal"""
    logger = setup_logging()
    
    logger.info("="*60)
    logger.info("V√âRIFICATION DE LA CONFIGURATION DES M√âDIAS")
    logger.info("="*60)
    
    # V√©rifier la modification du code
    is_modified = check_media_organizer_modification()
    
    # Demander le r√©pertoire √† analyser
    base_dir = input("\nEntrez le chemin du dossier client √† analyser (laissez vide pour ignorer cette √©tape): ")
    
    if base_dir and os.path.exists(base_dir):
        logger.info(f"\nAnalyse du dossier: {base_dir}")
        
        # Obtenir les statistiques
        stats = get_media_folders_stats(base_dir)
        
        logger.info("\n--- STATISTIQUES DES M√âDIAS ---")
        logger.info(f"Nombre total de contacts: {stats['total_contacts']}")
        logger.info(f"Dossiers 'media_envoyes': {stats['sent_media_folders']}")
        logger.info(f"Dossiers 'media_recus': {stats['received_media_folders']}")
        logger.info(f"Fichiers m√©dias envoy√©s: {stats['sent_media_files']} ({format_size(stats['sent_media_size'])})")
        logger.info(f"Fichiers m√©dias re√ßus: {stats['received_media_files']} ({format_size(stats['received_media_size'])})")
        
        # Si des m√©dias envoy√©s sont pr√©sents dans un dossier d√©j√† trait√©
        if stats['sent_media_files'] > 0 and is_modified:
            logger.info("\n‚ö†Ô∏è Des m√©dias envoy√©s sont toujours pr√©sents alors que la modification est active.")
            logger.info("üëâ Cela signifie que ces m√©dias ont √©t√© extraits avant la modification du code.")
            logger.info("üëâ Utilisez clean_sent_media.py pour supprimer ces m√©dias envoy√©s.")
        
        # Si aucun m√©dia envoy√© n'est pr√©sent et la modification est active
        elif stats['sent_media_files'] == 0 and is_modified:
            logger.info("\n‚úÖ Aucun m√©dia envoy√© n'est pr√©sent - La modification fonctionne correctement!")
        
        # Si aucun m√©dia envoy√© n'est pr√©sent mais la modification n'est pas d√©tect√©e
        elif stats['sent_media_files'] == 0 and not is_modified:
            logger.info("\n‚ùì Aucun m√©dia envoy√© n'est pr√©sent, mais la modification n'est pas d√©tect√©e.")
            logger.info("üëâ Il est possible que la modification ait √©t√© impl√©ment√©e diff√©remment.")
    
    logger.info("\n--- RECOMMANDATIONS ---")
    if is_modified:
        logger.info("‚úÖ La modification pour ignorer les m√©dias envoy√©s est correctement impl√©ment√©e.")
        logger.info("üëâ Les futures extractions ne cr√©eront plus de m√©dias envoy√©s.")
    else:
        logger.info("‚ö†Ô∏è La modification pour ignorer les m√©dias envoy√©s n'est PAS d√©tect√©e.")
        logger.info("üëâ V√©rifiez que le fichier processors/media_organizer.py contient bien le code pour ignorer les m√©dias envoy√©s.")
    
    logger.info("\nüëâ Utilisez clean_sent_media.py pour supprimer les m√©dias envoy√©s existants.")
    logger.info("="*60)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
